<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Wab Site</title>
    <link>https://xuwab.github.io/posts/</link>
    <description>Recent content in Posts on Wab Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 May 2020 00:20:57 +0800</lastBuildDate>
    
	<atom:link href="https://xuwab.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CSS知识篇</title>
      <link>https://xuwab.github.io/posts/css%E7%9F%A5%E8%AF%86%E7%AF%87/</link>
      <pubDate>Sun, 24 May 2020 00:20:57 +0800</pubDate>
      
      <guid>https://xuwab.github.io/posts/css%E7%9F%A5%E8%AF%86%E7%AF%87/</guid>
      <description>这篇主要介绍浏览器的渲染原理和CSS动画。
浏览器渲染原理 渲染树构建、布局及绘制 整个过程可以概括为根据 HTML 和 CSS 输入构建了 DOM 树和 CSSOM 树，再将CSSOM 树和 DOM 树合并成渲染树，然后用于计算每个可见元素的布局，并输出给绘制流程，将像素渲染到屏幕上。
简要概述了浏览器完成的步骤：
 处理 HTML 标记并构建 DOM 树。 处理 CSS 标记并构建 CSSOM 树。 将 DOM 与 CSSOM 合并成一个渲染树。 根据渲染树来Layout布局（文档流、盒模型、计算大小和位置），以计算每个节点的几何信息。 Paint绘制（把边框颜色、文字颜色、阴影等画出来）。 Compose合成（根据层叠关系展示画面）到屏幕上。  关于DOM 和 CSSOM 合并成一个“渲染树”，浏览器大体上完成了下列工作：   从 DOM 树的根节点开始遍历每个可见节点。
  某些节点不可见（例如脚本标记、元标记等），因为它们不会体现在渲染输出中，所以会被忽略。
   某些节点通过 CSS 隐藏，因此在渲染树中也会被忽略。 对于每个可见节点，为其找到适配的 CSSOM 规则并应用它们。  发射可见节点，连同其内容和计算的样式。  关于“布局”阶段 合并成一个“渲染树”的过程是计算了哪些节点应该是可见的以及它们的计算样式，但我们尚未计算它们在设备视口内的确切位置和大小&amp;mdash;这就是“布局”阶段，也称为“自动重排”。
布局流程的输出是一个“盒模型”，它会精确地捕获每个元素在视口内的确切位置和尺寸：所有相对测量值都转换为屏幕上的绝对像素。
关于“绘制”阶段 将渲染树中的每个节点转换成屏幕上的实际像素。这一步通常称为“绘制”或“栅格化”。
执行渲染树构建、布局和绘制所需的时间将取决于文档大小、应用的样式，以及运行文档的设备：文档越大，浏览器需要完成的工作就越多；样式越复杂，绘制需要的时间就越长（例如，单色的绘制开销“较小”，而阴影的计算和渲染开销则要“大得多”）。
注意点：
 visibility: hidden 与 display: none 是不一样的。前者隐藏元素，但元素仍占据着布局空间（即将其渲染成一个空框），而后者 (display: none) 将元素从渲染树中完全移除，元素既不可见，也不是布局的组成部分。 渲染树只包含渲染网页所需的节点。 布局更新样式包含布局、绘制、合成，布局和绘制有可能被忽略。  CSS 动画 主要方式有三种：</description>
    </item>
    
    <item>
      <title>HTML常用标签</title>
      <link>https://xuwab.github.io/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Sun, 26 Apr 2020 21:38:00 +0800</pubDate>
      
      <guid>https://xuwab.github.io/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
      <description>这篇主要介绍 a 标签、img 标签和 table 标签的用法。
关于a 标签 属性 1、href（hyper reference） 用来表示超链接，使用类型有：
网址  https://google.com http://google.com //google.com  路径  /a/index.html index.html  伪协议  javascript:; mailto:邮箱 tel:手机号  id 例如：href=#xxx
2、target 表示目标窗口：
 _blank （新窗口） _top _parent _self（default）  窗口命名：
 window的name  例如：自定义一个target=&amp;quot;xxx&amp;quot; 会寻找xxx窗口并打开，没有就新建窗口，命名为xxx。
 iframe的name  3、download 4、rel=noopener 代码如下：
&amp;lt;a href=&amp;#34;https://www.baidu.com&amp;#34; target=&amp;#34;_blank&amp;#34;&amp;gt;超链接&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;#34;/a/index.html&amp;#34;&amp;gt;访问a.html&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;#34;index2.html&amp;#34;&amp;gt;访问index2.html&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;#34;javascript:alert(1)&amp;#34;&amp;gt;空链接&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;#34;mailto:707187137@qq.com&amp;#34;&amp;gt;发邮件&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;#34;tel:10086&amp;#34;&amp;gt;打电话&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;#34;#xxx&amp;#34;&amp;gt;id&amp;lt;/a&amp;gt; 作用  跳转外部页面 跳转内部锚点 跳转到邮箱、电话  关于img 标签 作用 发出 get请求 展示一张图片</description>
    </item>
    
    <item>
      <title>HTML入门笔记1</title>
      <link>https://xuwab.github.io/posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Tue, 21 Apr 2020 23:12:01 +0800</pubDate>
      
      <guid>https://xuwab.github.io/posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</guid>
      <description>HTML简介和简单标签的使用 简介 HTML 是谁发明的？ HTML 是 Tim Berners-Lee 在1990年左右发明的，他的贡献：
 发明了第一个浏览器 发明了第一个服务器 用自己的浏览器访问自己的服务器 发明了 WWWW ，同时发明了 HTML 、 HTTP 和 URL  HTML 起手应该写什么？ 代码如下：
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt; &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge,chrome=1&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;   &amp;lt;!DOCTYPE html&amp;gt;
这是标记文档类型
  &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
html 标签，可以把 lang = en 改成 lang = zh-CN 。注意，zh-CN 不要写成 zh ，因为不同国家的中文有不同的语言类型。
  &amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;</description>
    </item>
    
    <item>
      <title>Create Personal Blog</title>
      <link>https://xuwab.github.io/posts/creat_personal_blog/</link>
      <pubDate>Mon, 13 Apr 2020 19:21:23 +0800</pubDate>
      
      <guid>https://xuwab.github.io/posts/creat_personal_blog/</guid>
      <description>How to create a personal blog with hugo Open home page of Hugo : A blog generator by go language
press &amp;lsquo;Quick start&amp;rsquo; button to create!
Step 1: Install Hugo brew install hugo Step 2: Create a New Site Create the directory to init your blog.If your want to build based github,you need call the directory name as &amp;lsquo;username.github.io&amp;rsquo;.
hugo new site username.github.io Step 3: Add a Theme &amp;lsquo;cd&amp;rsquo; into blog directory</description>
    </item>
    
  </channel>
</rss>